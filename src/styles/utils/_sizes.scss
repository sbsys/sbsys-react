/* lines height */
$line: (
	xs: 1,
	sm: 1.125,
	md: 1.25,
	lg: 1.375,
	xl: 1.5,
);

/* sizes */
$sizes-values: (
	border: (
		xs: 0.0625,
		sm: 0.09375,
		md: 0.125,
		lg: 0.15625,
		xl: 0.1875,
	),
	split: (
		xs: 0.125,
		sm: 0.25,
		md: 0.375,
		lg: 0.5,
		xl: 0.625,
	),
	text: (
		xs: 0.75,
		sm: 0.875,
		md: 1,
		lg: 1.25,
		xl: 1.5,
	),
	element: (
		xs: 2,
		sm: 2.75,
		md: 3.5,
		lg: 4.25,
		xl: 5,
	),
	space: (
		xs: 0.5,
		sm: 0.75,
		md: 1,
		lg: 1.5,
		xl: 2,
	),
	component: (
		xs: 8,
		sm: 12,
		md: 16,
		lg: 20,
		xl: 24,
	),
	view: (
		xs: 40,
		sm: 44,
		md: 48,
		lg: 56,
		xl: 64,
	),
);

/* generate css variables */
@mixin generate-sizes {
	html {
		@each $category, $category-sizes in $sizes-values {
			@each $category-size-key, $category-size-value in $category-sizes {
				--sbsys-size-#{$category}-#{$category-size-key}: #{$category-size-value}rem;
			}
		}

		@each $ln-key, $ln-value in $line {
			--sbsys-size-line-#{$ln-key}: #{$ln-value};
		}
	}
}

@mixin sizes($size-type) {
	@if not map-has-key($sizes-values, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	&-gap {
		@each $size-key, $size-value in $sizes {
			&--#{$size-type}-#{$size-key} {
				gap: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-x--#{$size-type}-#{$size-key} {
				column-gap: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-y--#{$size-type}-#{$size-key} {
				row-gap: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}
	}

	&-padding {
		@each $size-key, $size-value in $sizes {
			&--#{$size-type}-#{$size-key} {
				padding: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-x--#{$size-type}-#{$size-key} {
				padding-left: var(--sbsys-size-#{$size-type}-#{$size-key});
				padding-right: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-y--#{$size-type}-#{$size-key} {
				padding-top: var(--sbsys-size-#{$size-type}-#{$size-key});
				padding-bottom: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}
	}

	&-margin {
		@each $size-key, $size-value in $sizes {
			&--#{$size-type}-#{$size-key} {
				margin: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-x--#{$size-type}-#{$size-key} {
				margin-left: var(--sbsys-size-#{$size-type}-#{$size-key});
				margin-right: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}

		@each $size-key, $size-value in $sizes {
			&-y--#{$size-type}-#{$size-key} {
				margin-top: var(--sbsys-size-#{$size-type}-#{$size-key});
				margin-bottom: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}
	}

	&-border {
		border-style: solid;

		@each $size-key, $size-value in $sizes {
			&--#{$size-type}-#{$size-key} {
				border-width: var(--sbsys-size-#{$size-type}-#{$size-key});
			}
		}
	}
}

@mixin lines {
	&-line {
		@each $size-key, $size-value in $sizes {
			&--#{$size-key} {
				line-height: var(--sbsys-size-line-#{$size-key});
			}
		}
	}
}
