/* space rounded */
@mixin rounded($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-left($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-top-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
	border-bottom-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-right($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-top-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
	border-bottom-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-top($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-top-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
	border-top-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-bottom($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-bottom-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
	border-bottom-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-top-left($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-top-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-top-right($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-top-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-bottom-right($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-bottom-right-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin rounded-bottom-left($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	border-bottom-left-radius: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin implement-rounded-size {
	&-rounded {
		@each $size-type in map-values($sizes-types) {
			&--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&--#{$current-size} {
						@include rounded($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-left--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-left--#{$current-size} {
						@include rounded-left($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-right--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-right--#{$current-size} {
						@include rounded-right($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-top--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-top--#{$current-size} {
						@include rounded-top($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-bottom--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-bottom--#{$current-size} {
						@include rounded-bottom($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-top-left--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-top-left--#{$current-size} {
						@include rounded-top-left($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-top-right--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-top-right--#{$current-size} {
						@include rounded-top-right($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-bottom-right--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-bottom-right--#{$current-size} {
						@include rounded-bottom-right(
							$size-type,
							$current-size
						);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-bottom-left--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-bottom-left--#{$current-size} {
						@include rounded-bottom-left($size-type, $current-size);
					}
				}
			}
		}
	}
}
