/* space gap */
@mixin gap($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	gap: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin gap-x($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	column-gap: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin gap-y($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	row-gap: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin implement-gap-size {
	&-gap {
		$parent: &;

		@each $size-type in map-values($sizes-types) {
			&--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&--#{$current-size} {
						@include gap($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-x--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-x--#{$current-size} {
						@include gap-x($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-y--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-y--#{$current-size} {
						@include gap-y($size-type, $current-size);
					}
				}
			}
		}
	}
}
