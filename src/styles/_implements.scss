/* display */
@mixin implement-display-flex {
	@extend %display-flex;

	@each $orientation-key, $orientation-value in $orientations {
		&--#{$orientation-value} {
			@extend %display-flex-#{$orientation-value};
		}
	}

	@each $alignment-key, $alignment-value in $alignments {
		&--#{$alignment-value} {
			@extend %display-flex-#{$alignment-value};
		}
	}
}

@mixin implement-size-gap($size-type) {
	@if not map-has-key($sizes-values, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	@each $size-key, $size-value in $sizes {
		&-gap {
			&--#{$size-key} {
				@extend %sizes-gap--#{$size-type}-#{$size-key};
			}

			&-x--#{$size-key} {
				@extend %sizes-gap-x--#{$size-type}-#{$size-key};
			}

			&-y--#{$size-key} {
				@extend %sizes-gap-y--#{$size-type}-#{$size-key};
			}
		}
	}
}

@mixin implement-size-padding($size-type) {
	@if not map-has-key($sizes-values, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	@each $size-key, $size-value in $sizes {
		&-padding {
			&--#{$size-key} {
				@extend %sizes-padding--#{$size-type}-#{$size-key};
			}

			&-y--#{$size-key} {
				@extend %sizes-padding-y--#{$size-type}-#{$size-key};
			}

			&-top--#{$size-key} {
				@extend %sizes-padding-top--#{$size-type}-#{$size-key};
			}

			&-bottom--#{$size-key} {
				@extend %sizes-padding-bottom--#{$size-type}-#{$size-key};
			}

			&-x--#{$size-key} {
				@extend %sizes-padding-x--#{$size-type}-#{$size-key};
			}

			&-left--#{$size-key} {
				@extend %sizes-padding-left--#{$size-type}-#{$size-key};
			}

			&-right--#{$size-key} {
				@extend %sizes-padding-right--#{$size-type}-#{$size-key};
			}
		}
	}
}

@mixin implement-size-border($size-type) {
	@if not map-has-key($sizes-values, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	@extend %sizes-border;

	@each $size-key, $size-value in $sizes {
		&-border {
			&--#{$size-key} {
				@extend %sizes-border--#{$size-type}-#{$size-key};
			}

			&-y--#{$size-key} {
				@extend %sizes-border-y--#{$size-type}-#{$size-key};
			}

			&-top--#{$size-key} {
				@extend %sizes-border-top--#{$size-type}-#{$size-key};
			}

			&-bottom--#{$size-key} {
				@extend %sizes-border-bottom--#{$size-type}-#{$size-key};
			}

			&-x--#{$size-key} {
				@extend %sizes-border-x--#{$size-type}-#{$size-key};
			}

			&-left--#{$size-key} {
				@extend %sizes-border-left--#{$size-type}-#{$size-key};
			}

			&-right--#{$size-key} {
				@extend %sizes-border-right--#{$size-type}-#{$size-key};
			}
		}
	}
}

@mixin implement-size-rounded($size-type) {
	@if not map-has-key($sizes-values, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	@each $size-key, $size-value in $sizes {
		&-rounded {
			&--#{$size-key} {
				@extend %sizes-rounded--#{$size-type}-#{$size-key};
			}

			&-top--#{$size-key} {
				@extend %sizes-rounded-top--#{$size-type}-#{$size-key};
			}

			&-bottom--#{$size-key} {
				@extend %sizes-rounded-bottom--#{$size-type}-#{$size-key};
			}

			&-left--#{$size-key} {
				@extend %sizes-rounded-left--#{$size-type}-#{$size-key};
			}

			&-right--#{$size-key} {
				@extend %sizes-rounded-right--#{$size-type}-#{$size-key};
			}
		}
	}
}
