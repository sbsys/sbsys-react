/* serie fill */
@mixin fill($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	background-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-bg-opacity)
	);
}

@mixin fill-opacity($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-bg-opacity: #{map-get($opacities, $size-type)};
}

@mixin implement-fill($intensity-type) {
	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	&-fill {
		@each $serie in map-values($series) {
			&--#{$serie} {
				@include fill(light, $serie, $intensity-type);

				@include theme(dark) {
					@include fill(dark, $serie, $intensity-type);
				}
			}
		}
	}
}

@mixin implement-fill-opacity {
	&-fill {
		@each $size in map-values($sizes) {
			&--#{$size} {
				@include fill-opacity($size);
			}
		}
	}
}
