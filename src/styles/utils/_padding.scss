/* space padding */
@mixin padding($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-x($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-left: var(--sbsys-size-#{$size-type}-#{$size});
	padding-right: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-left($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-left: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-right($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-right: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-y($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-top: var(--sbsys-size-#{$size-type}-#{$size});
	padding-bottom: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-top($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-top: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin padding-bottom($size-type, $size) {
	@if not map-has-key($sizes-types, $size-type) {
		@error "No key '#{$size-type}' on sizes types";
	}

	@if not map-has-key($sizes, $size) {
		@error "No key '#{$size}' on sizes";
	}

	padding-bottom: var(--sbsys-size-#{$size-type}-#{$size});
}

@mixin implement-padding-size {
	&-padding {
		$parent: &;

		@each $size-type in map-values($sizes-types) {
			&--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&--#{$current-size} {
						@include padding($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-x--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-x--#{$current-size} {
						@include padding-x($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-left--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-left--#{$current-size} {
						@include padding-left($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-right--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-right--#{$current-size} {
						@include padding-right($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-y--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-y--#{$current-size} {
						@include padding-y($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-top--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-top--#{$current-size} {
						@include padding-top($size-type, $current-size);
					}
				}
			}
		}

		@each $size-type in map-values($sizes-types) {
			&-bottom--#{$size-type}#{$parent} {
				@each $current-size in map-values($sizes) {
					&-bottom--#{$current-size} {
						@include padding-bottom($size-type, $current-size);
					}
				}
			}
		}
	}
}
