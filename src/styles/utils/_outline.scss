/* serie outline */
@mixin outline($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-left-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-left-opacity)
	);
	border-right-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-right-opacity)
	);
	border-top-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-top-opacity)
	);
	border-bottom-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-bottom-opacity)
	);
}

@mixin outline-x($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-left-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-left-opacity)
	);
	border-right-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-right-opacity)
	);
}

@mixin outline-left($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-left-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-left-opacity)
	);
}

@mixin outline-right($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-right-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-right-opacity)
	);
}

@mixin outline-y($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-top-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-top-opacity)
	);
	border-bottom-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-bottom-opacity)
	);
}

@mixin outline-top($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-top-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-top-opacity)
	);
}

@mixin outline-bottom($theme-type, $serie-type, $intensity-type) {
	@if not map-has-key($themes, $theme-type) {
		@error "No key '#{$theme-type}' on themes";
	}

	@if not map-has-key($series, $serie-type) {
		@error "No key '#{$serie-type}' on series";
	}

	@if not map-has-key($intensities, $intensity-type) {
		@error "No key '#{$intensity-type}' on intensities";
	}

	border-bottom-color: rgba(
		var(--sbsys-serie-#{$theme-type}-#{$serie-type}-#{$intensity-type}),
		var(--sbsys-serie-border-bottom-opacity)
	);
}

@mixin outline-opacity($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-left-opacity: #{map-get($opacities, $size-type)};
	--sbsys-serie-border-right-opacity: #{map-get($opacities, $size-type)};
	--sbsys-serie-border-top-opacity: #{map-get($opacities, $size-type)};
	--sbsys-serie-border-bottom-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-x($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-left-opacity: #{map-get($opacities, $size-type)};
	--sbsys-serie-border-right-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-left($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-left-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-right($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-right-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-y($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-top-opacity: #{map-get($opacities, $size-type)};
	--sbsys-serie-border-bottom-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-top($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-top-opacity: #{map-get($opacities, $size-type)};
}

@mixin outline-opacity-bottom($size-type) {
	@if not map-has-key($sizes, $size-type) {
		@error "No key '#{$size-type}' on sizes";
	}

	--sbsys-serie-border-bottom-opacity: #{map-get($opacities, $size-type)};
}

@mixin implement-outline-intensity {
	&-outline {
		$parent: &;

		border-color: transparent;
		border-style: solid;

		@each $serie in map-values($series) {
			&--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&--#{$intensity} {
						@include outline(light, $serie, $intensity);

						@include theme(dark) {
							@include outline(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-x--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-x--#{$intensity} {
						@include outline-x(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-x(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-left--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-left--#{$intensity} {
						@include outline-left(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-left(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-right--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-right--#{$intensity} {
						@include outline-right(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-right(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-y--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-y--#{$intensity} {
						@include outline-y(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-y(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-top--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-top--#{$intensity} {
						@include outline-top(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-top(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $serie in map-values($series) {
			&-bottom--#{$serie}#{$parent} {
				@each $intensity in map-values($intensities) {
					&-bottom--#{$intensity} {
						@include outline-bottom(light, $serie, $intensity);

						@include theme(dark) {
							@include outline-bottom(dark, $serie, $intensity);
						}

						@content;
					}
				}
			}
		}

		@each $size in map-values($sizes) {
			&--#{$size} {
				@include outline-opacity($size);
			}
		}

		@each $size in map-values($sizes) {
			&-x--#{$size} {
				@include outline-opacity-x($size);
			}
		}

		@each $size in map-values($sizes) {
			&-left--#{$size} {
				@include outline-opacity-left($size);
			}
		}

		@each $size in map-values($sizes) {
			&-right--#{$size} {
				@include outline-opacity-right($size);
			}
		}

		@each $size in map-values($sizes) {
			&-y--#{$size} {
				@include outline-opacity-y($size);
			}
		}

		@each $size in map-values($sizes) {
			&-top--#{$size} {
				@include outline-opacity-top($size);
			}
		}

		@each $size in map-values($sizes) {
			&-bottom--#{$size} {
				@include outline-opacity-bottom($size);
			}
		}
	}
}
